// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  // NOTE: You probably want to change this to another database later on
  provider = "postgresql"

  // This value is read from the .env file.
  url = env("DATABASE_URL")

  // extensions = [postgis(version: "3.3")]
  extensions = [pgcrypto()]
}

// ////////////////////////////////////////
// /////////////// enums //////////////////
// ////////////////////////////////////////

enum Permission {
  administrate
}

enum SessionTokenType {
  cookie
}

enum OpenIdProvider {
  google
  facebook
  twitter
  github
  discord
  twitch
  gitlab
  bitbucket
}

// ////////////////////////////////////////
// /////////////// models /////////////////
// ////////////////////////////////////////

model role {
  roleName String @id

  description String?

  permissions Permission[]

  userRoles userRole[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model user {
  userId String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  username String? @unique
  email    String? @unique
  phone    String?

  firstName String?
  lastName  String?
  fullName  String?
  avatarUrl String?

  sessions       session[]
  openIdAccounts openIdAccount[]

  userRoles userRole[]

  // settings
  language String?
  timezone String?

  emailVerified         DateTime?
  phoneVerified         DateTime?
  emailVerificationCode String?
  phoneVerificationCode String?
  oneTimeLoginCodes     String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model userRole {
  userId String @db.Uuid
  user   user   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  roleName String
  role     role   @relation(fields: [roleName], references: [roleName], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, roleName])
}

model session {
  sessionId String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      SessionTokenType
  name      String
  value     String           @unique
  expires   DateTime
  userId    String           @db.Uuid
  user      user             @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model openIdAccount {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @db.Uuid
  user   user   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  provider  OpenIdProvider
  accountId String?
  email     String?
  phone     String?
  username  String?
  fullName  String?
  firstName String?
  lastName  String?
  avatarUrl String?

  // fields for oauth
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  scope              String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
